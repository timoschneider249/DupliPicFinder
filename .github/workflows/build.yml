name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build executables
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build executable
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            pyinstaller --onefile src/main.py
          else
            pyinstaller --onefile src/main.py
          fi
        shell: bash

      - name: Archive Linux executable
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: executable-linux
          path: dist/main

      - name: Archive Windows executable
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: executable-windows
          path: dist/main.exe

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Parse version from setup.py
        id: get_version
        run: |
          VERSION=$(python setup.py --version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download Linux executable
        if: always()
        uses: actions/download-artifact@v2
        with:
          name: executable-linux
          path: ./dist

      - name: Download Windows executable
        if: always()
        uses: actions/download-artifact@v2
        with:
          name: executable-windows
          path: ./dist

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Linux executable to Release
        if: always()
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/main
          asset_name: main_linux
          asset_content_type: application/octet-stream

      - name: Upload Windows executable to Release
        if: always()
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/main.exe
          asset_name: main_windows.exe
          asset_content_type: application/octet-stream
